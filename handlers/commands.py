from aiogram.fsm.context import FSMContext
from handlers.admin import get_keyboard, series, AdminPanel, admins
from aiogram.filters import Command
from aiogram import types, Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.config import voice
from PostgreSQL.database import DataBase
from aiogram.filters.chat_member_updated import \
    ChatMemberUpdatedFilter, MEMBER, KICKED
from aiogram.types import ChatMemberUpdated

database = DataBase()
router = Router()
router.message.filter()


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def user_blocked_bot(event: ChatMemberUpdated):
    database.delete_row(event.from_user.id, 'mailing_users')
    database.delete_row(event.from_user.id, 'users')


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def user_unblocked_bot(event: ChatMemberUpdated):
    database.insert_data_to_database(event.chat.id, event.from_user.username, 'mailing_users')
    database.insert_data_to_database(event.chat.id, event.from_user.username, 'users')


@router.message(Command("start"))
async def start(message: types.Message) -> None:
    database.insert_data_to_database(message.from_user.id, message.from_user.first_name, 'users')
    database.insert_data_to_database(message.from_user.id, message.from_user.first_name, 'mailing_users')
    builder = InlineKeyboardBuilder()
    buttons = [types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–∏—é", callback_data="choose"),
               types.InlineKeyboardButton(text="–í–∫–ª./–û—Ç–∫–ª. –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã–π —Å–µ—Ä–∏—è—Ö", callback_data="switch_mailing"),
               types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —Å–æ –≤—Å–µ–º–∏ —Å–µ—Ä–∏—è–º–∏", url="https://t.me/ScorlupaChannel")]
    builder.row(*(button for button in buttons), width = 1)
    await message.answer_voice(voice, reply_markup=builder.as_markup())


@router.callback_query(F.data == "choose")
async def choose_series_inline(callback: types.CallbackQuery):
    await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:", reply_markup=get_keyboard())


@router.message(Command("series"))
async def choose_series_inline(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:", reply_markup=get_keyboard())


@router.callback_query(F.data == "switch_mailing")
async def choose_series_inline(callback: types.CallbackQuery):
    mailing_users_list = database.select_id_from_database('mailing_users')
    for user_data in mailing_users_list:
        if callback.message.chat.id == user_data[0]:
            database.delete_row(callback.message.chat.id, 'mailing_users')
            await callback.message.answer(text="–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            break
    else:
        database.insert_data_to_database(callback.message.chat.id, callback.message.chat.first_name, 'mailing_users')
        await callback.message.answer(text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


@router.callback_query(F.data.startswith("series_"))
async def choose_series_inline(callback: types.CallbackQuery):
    num = int(callback.data.split("_")[1])
    await callback.message.answer_video(series[num - 1])
    await callback.message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {num} —Å–µ—Ä–∏–∏üçø")


@router.message(Command("Admin"))
async def new_post(message: types.Message, state: FSMContext) -> None:
    for admin in admins:
        if str(message.from_user.id) == admin:
            await state.set_state(AdminPanel.admin)
            await message.answer("–í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n/NewPost - –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞\n/AllUsers - –¥–ª—è "
                                 "–ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
